import java.util.Scanner;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

class sustocsv{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        File fi;
        File fo;
        FileReader fr=null;
        FileWriter fw=null;
        BufferedReader br=null;
        BufferedWriter bw=null;
        PrintWriter pw=null;
        try{
            // System.out.print("読み込むファイル名: ");
            // fi=new File(sc.next());
            // fi=new File("../sus/shining_star-2023-04-26T07-05-59.863Z.sus");
            // fi=new File("../sus/ssshining_star-2023-05-06T18-08-06.327Z.sus");
            fi=new File("Untitled-2023-05-21T04-23-25.597Z.sus");            

            if(fi.exists()&&fi.isFile()&&fi.canRead()){
                br=new BufferedReader(new FileReader(fi));
            }else{
                System.out.println("ファイルを読めません。");
                System.exit(0);
            }
            // System.out.print("書き出すファイル名: ");
            // fo=new File(sc.next());
            // fo=new File("../../Minge2023Spring_Team2/Minge2023Spring_Team2/Minge2023Spring_Team2/example/musics/test/a.csv");
            fo=new File("a.csv");

            if(fo.exists()){
                if(fo.isFile()&&fo.canWrite()){
                    pw=new PrintWriter(new BufferedWriter(new FileWriter(fo)));
                }else{
                    System.out.println("ファイルに書けません。");
                    System.exit(0);
                }
            }else{
                if(fo.createNewFile()){
                    pw=new PrintWriter(new BufferedWriter(new FileWriter(fo)));
                }else{
                    System.out.println("ファイルを作成できません。");
                    System.exit(0);
                }
            }
            if(br!=null&&pw!=null){
                String s;
                br.readLine();                                                                  //This file was generated by PaletteWorks Editor v1.10.0
                br.readLine();                                                                  //#TITLE ""
                br.readLine();                                                                  //#ARTIST ""
                br.readLine();                                                                  //#DESIGNER ""
                br.skip(12);                                                                    //#WAVEOFFSET 
                double offsetms=Double.parseDouble(br.readLine());
                br.readLine();                                                                  //
                br.readLine();                                                                  //#REQUEST "ticks_per_beat 480"
                br.readLine();                                                                  //
                ArrayList<double[]> wholemeasureandtime=new ArrayList<double[]>();
                while(true){
                    s=br.readLine();
                    if(s.equals("")){
                        break;
                    }
                    double[] measureandtime=new double[2];
                    measureandtime[0]=Integer.parseInt(s.substring(1,4));
                    measureandtime[1]=Double.parseDouble(s.substring(7));
                    wholemeasureandtime.add(measureandtime);
                }
                ArrayList<Integer> measure=new ArrayList<Integer>();
                ArrayList<Integer> lane=new ArrayList<Integer>();
                ArrayList<ArrayList<Integer>> wholedata=new ArrayList<ArrayList<Integer>>();
                ArrayList<ArrayList<Double>> wholebeat=new ArrayList<ArrayList<Double>>();
                int wholedatal=0;
                double currentbeat=0;
                double addedbeat=0;
                int wholemeasureandtimeindex=0;
                ArrayList<Double> wholebpmlist=new ArrayList<Double>();
                ArrayList<Integer> bpmmeasure=new ArrayList<Integer>();
                ArrayList<Double> wholebpm=new ArrayList<Double>();
                ArrayList<Double> wholebpmbeat=new ArrayList<Double>();
                double currentbpmbeat=0;
                int currentbpmmeasure=0;
                wholebpmlist.add(0.0);
                while((s=br.readLine())!=null){
                    if(s.substring(1,4).equals("BPM")){
                        wholebpmlist.add(Double.parseDouble(s.substring(7)));
                    }else if(s.substring(4,5).equals("0")){
                        bpmmeasure.add(Integer.parseInt(s.substring(1,4)));
                        String rawdata=s.substring(7);
                        int datal=rawdata.length()/2;
                        for(int i=0;i<datal;i++){
                            int index=Integer.parseInt(rawdata.substring(i*2,i*2+2),36);
                            if(index!=0){
                                wholebpm.add(wholebpmlist.get(index));
                                wholebpmbeat.add(currentbpmbeat);
                            }
                            if(wholemeasureandtimeindex<wholemeasureandtime.size()-1&&wholemeasureandtime.get(wholemeasureandtimeindex)[0]<bpmmeasure.get(bpmmeasure.size()-1)){
                                wholemeasureandtimeindex++;
                            }
                            currentbpmbeat+=wholemeasureandtime.get(wholemeasureandtimeindex)[1]/datal;
                        }
                    }else{
                        measure.add(Integer.parseInt(s.substring(1,4)));
                        lane.add(Integer.parseInt(s.substring(5,6),16)/2-1);
                        String rawdata=s.substring(7);
                        int datal=rawdata.length()/2;
                        ArrayList<Integer> data=new ArrayList<Integer>();
                        ArrayList<Double> beat=new ArrayList<Double>();
                        if(measure.size()>1&&measure.get(measure.size()-1)==measure.get(measure.size()-2)){
                            currentbeat-=addedbeat;
                        }
                        addedbeat=0;
                        for(int i=0;i<datal;i++){
                            int currentdata=Integer.parseInt(rawdata.substring(i*2,i*2+1));
                            if(currentdata!=0){
                                switch(currentdata){
                                    case 1:
                                        data.add(0);
                                        break;
                                }
                                beat.add(currentbeat);
                            }
                            if(wholemeasureandtimeindex<wholemeasureandtime.size()-1&&wholemeasureandtime.get(wholemeasureandtimeindex)[0]<measure.get(measure.size()-1)){
                                wholemeasureandtimeindex++;
                            }
                            currentbeat+=wholemeasureandtime.get(wholemeasureandtimeindex)[1]/datal;
                            addedbeat+=wholemeasureandtime.get(wholemeasureandtimeindex)[1]/datal;
                        }
                        wholedata.add(data);
                        wholebeat.add(beat);
                        wholedatal+=data.size();
                    }
                }
                double offset=offsetms*wholebpmlist.get(1)/(60.0);
                if(offset!=0){
                    offset*=-1;
                }
                double[][] dataandbeatandlaneandbpm=new double[wholedatal][4];
                int k=0;
                for(int i=0;i<wholedata.size();i++){
                    for(int j=0;j<wholedata.get(i).size();j++){
                        dataandbeatandlaneandbpm[k][0]=wholedata.get(i).get(j);
                        dataandbeatandlaneandbpm[k][1]=wholebeat.get(i).get(j);
                        dataandbeatandlaneandbpm[k][2]=lane.get(i);
                        boolean bpmassigned=false;
                        for(int l=0;l<wholebpmbeat.size();l++){
                            if(dataandbeatandlaneandbpm[k][1]==wholebpmbeat.get(l)){
                                dataandbeatandlaneandbpm[k][3]=wholebpm.get(l);
                                bpmassigned=true;
                                break;
                            }
                        }
                        if(!bpmassigned){
                            dataandbeatandlaneandbpm[k][3]=0.0;//ソートされてから一つ前のbpmを入れるので一旦0.0
                        }
                        k++;
                    }
                }
                Arrays.sort(dataandbeatandlaneandbpm,(a,b)->Double.valueOf(a[1]).compareTo(Double.valueOf(b[1])));
                for(int i=wholedatal-1;i>0;i--){
                    dataandbeatandlaneandbpm[i][1]-=dataandbeatandlaneandbpm[i-1][1];
                }
                dataandbeatandlaneandbpm[0][1]=offset;
                int i;
                for(i=0;i<wholedatal-1;i++){
                    pw.println((int)dataandbeatandlaneandbpm[i][0]+","+dataandbeatandlaneandbpm[i][1]+","+(int)dataandbeatandlaneandbpm[i][2]+","+dataandbeatandlaneandbpm[i][3]);
                }
                pw.print((int)dataandbeatandlaneandbpm[i][0]+","+dataandbeatandlaneandbpm[i][1]+","+(int)dataandbeatandlaneandbpm[i][2]+","+dataandbeatandlaneandbpm[i][3]);
                br.close();
                pw.close();
            }
        }catch(FileNotFoundException e){
            System.out.println(e);
        }catch(IOException e){
            System.out.println(e);
        }
    }
}